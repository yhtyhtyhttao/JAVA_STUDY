Java线程知识点（1）

几乎所有的操作系统都支持同时运行多个任务，一个任务通常就是一个程序，每个运行中的程序就是一个进程。当一个程序运行时，内部可能包含了多个顺序执行流，每个顺序执行流就是一个线程。

狭义定义：进程是正在运行的程序的实例（an instance of a computer program that is being executed）。
广义定义：进程是一个具有一定独立功能的程序关于某个数据集合的一次运行活动。它是操作系统动态执行的基本单元，在传统的操作系统中，进程既是基本的分配单元，也是基本的执行单元。


进程的特征：
1.独立性：进程是系统中独立存在的实体，它可以拥有自己独立的资源，每一个进程都拥有自己私有的地址空间。在没有经过进程本身允许的情况下，一个用户进程不可以直接访问其他进程的地址空间。
2.动态性：进程与程序的区别在于，程序只是一个静态的指令集合，而进程是一个正在系统中活动的指令集合。在进程中加入了时间的概念。进程具有自己的生命周期和各种不同的状态，这些概念在程序中都是不具备的。
3.并发性：多进程可以在单个处理器上并发执行，多个进程之间不会互相影响。


并行：指在同一时刻，有多条指令在多个处理器上同时执行；
并发：指在同一时刻只能有一条指令执行，但多个进程指令被快速轮换执行，使得在宏观上具有多个进程同时执行的效果。

一个程序运行后至少有一个进程，一个进程里可以包含多个线程，但至少包含一个线程。

多线程的优点：
1.进程间不能共享内存，但线程之间共享内存非常容易。
2.系统创建进程需要为该进程重新分配系统资源，但创建线程则代价小得多，因此使用多线程来实现多任务并发比多进程得效率高。
3.Java 语言内置多线程功能支持，而不是单纯的作为底层操作系统得调度方式，从而简化了Java得多线程编程。


JAVA使用Thread类代表线程，通过继承Thread类来创建并启动多线程。

注意：进行多线程编程是不要忘记Java程序运行时默认得主线程，main方法得方法体就是主线程的线程执行体。

Thread 与 Runnable 
Runnable：
（优）
线程类只是实现了Runnable接口，还可以继承其他类。
可以多个线程共享一个target对象，所以非常适合多个相同线程来处理同一份资源的情况，从而可以将CPU,代码和数据分开，形成清晰的模型
（缺）
编程稍微复杂，如果需要访问当前线程，必须使用Thread.currentThread()方法。

Thread:
(缺):因为线程类已经继承了Thread类，所以不能再继承其他父类。
(优):编写简单，如需访问当前线程，无需使用Thread.currentThread()方法，直接使用this即可获得当前线程。


使用继承Thread类的方法来创建线程类，多条线程之间无法共享线程类的实例变量。



join线程
Thread提供了让一个线程等待另一个线程完成的方法：join()方法。当在某个程序执行流中调用其他线程的join()方法时，调用线程将被阻塞，直到被join方法加入的join线程完成为止。
join()方法通常由使用线程的程序调用，以将大问题划分成许多小问题，每个小问题分配一个线程。当所有的小问题都得到处理后，在调用主线程来进一步操作。

后台线程
在后台运行，为其他线程提供服务。JVM垃圾回收线程就是典型的后台线程。
特征：如果所有的前台线程都死亡，后台线程会自动死亡。
调用Thread对象setDaemon(true)方法可将指定线程设置成后台线程。

public class DaemonThread extends Thread{
	//定义后台线程的线程执行体与普通线程没有任何区别
	public void run(){
		for(int i = 0;i<100;i++){
			System.out.println("-- "+getName()+" "+i);
		}
	}
	public static void main(String[] args){
		DaemonThread t = new DaemonThread();
		//将此线程设置成后台线程
		t.setDaemon(true);
		//启动后台线程
		t.start();
		for(int i=0;i<10;i++){
			System.out.println(Thread.currentThread().getName()+" "+i);
		}
		//----程序执行到此处，前台线程(main线程)结束-----
		//后台线程也应该随之结束
	}
}


isDaemon()  判断指定线程是否为后台线程
前台线程死亡后，JVM会通知后台线程死亡，但从它接受命令，到他做出响应，需要一定时间。而且要将某个线程设置为后台线程，必须在该线程启动之前设置，也就是说 setDaemon(true) 必须在 start() 方法之前调用。否则会引发异常。


线程睡眠：sleep()
让当前正在执行的线程暂停一段时间，并进入阻塞状态，可调用Thread类的静态sleep方法。

import java.util.Date;
public class TestSleep{
	public static void main(String[] args) throws Exception{
		for(int i=0;i<10;i++){
			System.out.println(Thread.currentThread().getName()+" "+i+"当前时间:"+new Date());
			//调用sleep方法让当前线程暂停1s.
			Thread.sleep(1000);
		}
	}
}
执行结果：
main 0 当前时间:Wed Apr 26 09:48:17 CST 2017
main 1 当前时间:Wed Apr 26 09:48:18 CST 2017
main 2 当前时间:Wed Apr 26 09:48:19 CST 2017
main 3 当前时间:Wed Apr 26 09:48:20 CST 2017
main 4 当前时间:Wed Apr 26 09:48:21 CST 2017
main 5 当前时间:Wed Apr 26 09:48:22 CST 2017
main 6 当前时间:Wed Apr 26 09:48:23 CST 2017
main 7 当前时间:Wed Apr 26 09:48:24 CST 2017
main 8 当前时间:Wed Apr 26 09:48:25 CST 2017
main 9 当前时间:Wed Apr 26 09:48:26 CST 2017



线程让步：yield()
让当前正在执行的线程暂停，但不会阻塞该线程，只是将该线程转入就绪状态。
当某个正在执行的线程调用了yield方法暂停之后，只有优先级与当前线程相同或者优先级比当前线程更高的就绪状态的线程才会获得执行的机会。




sleep 与 yield 区别：
sleep:
1. 暂停当前线程后，会给其他线程执行机会，与其他线程的优先级无关。
2. 会将线程转入阻塞状态，直到经过阻塞时间才会转入就绪状态。
3. sleep方法声明抛出 InterrutedException 异常，所以调用sleep方法时要么捕捉该异常，要么显式声明抛出该异常。
4. sleep方法比yield方法有更好的可移植性，通常不要依靠yield来控制并发线程的执行。

yield:
1.只会给优先级相同或优先级更高的线程执行机会。
2.不会将线程转入阻塞状态，只是强制当前线程进入就绪状态。因此完全有可能某个线程调用yield方法暂停之后，立即再次获得处理器资源被执行。
3. yield方法没有声明抛出任何异常。



改变线程优先级
每个线程执行时都具有一定的优先级，优先级高的线程获得较多的执行机会，而优先级低的线程则获得较少的执行机会。
每个线程默认的优先级都与创建它的父线程具有相同的优先级，在默认情况下，main 线程具有普通优先级，由 main 线程创建的子线程也有普通优先级。

Thread 提供了 setPriority(int newPriority) 和 getPriority() 方法来设置和返回指定线程的优先级，其中setPriority 方法的参数可以是一个整数，范围是1~10之间，也可以使Thread类的三个静态常量：
MAX_PRIORITY :其值是 10；    最高优先级
MIN_PRIORITY :其值是 1；       最低优先级
NORM_PRIORITY :其值是 5；   默认优先级
